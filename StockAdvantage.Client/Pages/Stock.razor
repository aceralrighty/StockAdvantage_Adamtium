@page "/stocks"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject HttpClient Http
@rendermode InteractiveWebAssembly
@implements IAsyncDisposable


<h2>Stock Price Tracker</h2>

<h3>Account Balance: $@Balance.ToString("F2")</h3>

<div>
    <label for="stockSymbol">Stock Symbol:</label>
    <input id="stockSymbol" @bind="StockSymbol" placeholder="Enter stock symbol..." />

    <label for="quantity">Quantity:</label>
    <input id="quantity" type="number" @bind="Quantity" min="1" />

    <button @onclick="FetchStockPrice">Get Price</button>
    <button @onclick="BuyStock" disabled="@(!CanBuyStock)">Buy Stock</button>
</div>

@if (!string.IsNullOrEmpty(Message))
{
    <p>@Message</p>
}

@if (IsConnected)
{
    <p style="color: green;">Connected to stock updates</p>
}
else
{
    <p style="color: red;">Disconnected from stock updates</p>
    <button @onclick="StartConnection">Reconnect</button>
}

@code {
    private string StockSymbol = string.Empty;
    private int Quantity = 1;
    private decimal StockPrice = 0;
    private decimal Balance = 50000m;
    private string Message = string.Empty;
    private HubConnection? hubConnection;
    
    private bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
    private bool CanBuyStock => StockPrice > 0 && Quantity > 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadBalanceAsync();
        await SetupSignalR();
    }
    private async Task LoadBalanceAsync()
    {
        try
        {
            Balance = await Http.GetFromJsonAsync<decimal>("api/stocks/balance");
        }
        catch (Exception ex)
        {
            Message = $"Error loading balance: {ex.Message}";
        }
    }
    private async Task SetupSignalR()
    {
        var hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/stockHub"))
            .Build();

        hubConnection.On<decimal>("ReceiveBalanceUpdate", (updatedBalance) =>
        {
            Balance = updatedBalance;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task StartConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/stockHub"))
            .Build();

        hubConnection.On<decimal>("ReceiveBalanceUpdate", (updatedBalance) =>
        {
            Balance = updatedBalance;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, decimal>("ReceiveStockUpdate", (symbol, price) =>
        {
            if (symbol.Equals(StockSymbol, StringComparison.OrdinalIgnoreCase))
            {
                StockPrice = price;
                InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.Closed += async (error) =>
        {
            Message = "Connection closed. Reconnecting...";
            await Task.Delay(5000);
            await StartConnection();
        };

        try
        {
            await hubConnection.StartAsync();
            Message = "Connected to stock updates.";
        }
        catch (Exception ex)
        {
            Message = $"Error connecting to SignalR: {ex.Message}";
        }
    }
    
    private async Task BuyStock()
    {
        if (Quantity < 1)
        {
            Message = "Quantity must be at least 1.";
            return;
        }

        var purchaseRequest = new { Symbol = StockSymbol, Quantity };
        try
        {
            var response = await Http.PostAsJsonAsync("api/stocks/buy", new { Symbol = StockSymbol, Quantity = Quantity });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<dynamic>();
                Message = result?.Message ?? "Purchase successful.";
                Balance = result?.Balance ?? Balance;
            }
            else
            {
                Message = "Purchase failed: Insufficient funds or other error.";
            }
        }
        catch (Exception ex)
        {
            Message = $"Error during purchase: {ex.Message}";
        }
    }

    private async Task FetchStockPrice()
    {
        if (!string.IsNullOrEmpty(StockSymbol))
        {
            try
            {
                StockPrice = await Http.GetFromJsonAsync<decimal>($"api/stocks/price/{StockSymbol}");
                Message = $"Current price for {StockSymbol}: ${StockPrice:F2}";
            }
            catch (Exception ex)
            {
                
                Message = $"Error fetching stock price: {ex.Message}";
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
